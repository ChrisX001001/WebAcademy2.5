# WebAcademy2.5
Learning to become a JS and Solidity dev!
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) ZA HASH CLASS
// hash class 
const fs = require('fs');
const crypto = require('crypto');


const filePath = 'largefile.txt';


const readStream = fs.createReadStream(filePath);


const hash = crypto.createHash('sha256');


readStream.on('data', (chunk) => {
    hash.update(chunk);
});


readStream.on('end', () => {
    const fileHash = hash.digest('hex');
    console.log('SHA-256 Hash:', fileHash);
});


readStream.on('error', (err) => {
    console.error('Error reading file:', err);
});
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) ZA NODE-RSA
// Import the Node-RSA library
const NodeRSA = require('node-rsa');

// Create a new RSA key pair with a key length of 512 bits
const key = new NodeRSA({ b: 512 });

// The text to be encrypted
const text = 'Hello RSA!';

// Encrypt the text using the public key
const encrypted = key.encrypt(text, 'base64');

// Output the encrypted text
console.log('Encrypted: ', encrypted);

// Decrypt the encrypted text using the private key
const decrypted = key.decrypt(encrypted, 'utf8');

// Output the decrypted text
console.log('Decrypted: ', decrypted);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) TRANSAKCIJE
const crypto = require('crypto');

class Block {
    constructor(index, timestamp, data) {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.hash = this.calculateHash();
    }

    calculateHash() {
        return crypto
            .createHash('sha256')
            .update(this.index.toString())
            .update(this.timestamp.toString())
            .update(this.data)
            .digest('hex');
    }

    toString() {
        return `Block #${this.index}\nTimestamp: ${this.timestamp}\nData: ${this.data}\nHash: ${this.hash}\n`;
    }
}

class Blockchain {
    constructor() {
        this.chain = [
            this.createGenesisBlock()
        ];
    }

    createGenesisBlock() {
        return new Block(0, new Date().toISOString(), "Genesis Block");
    }

    addBlock(newBlock) {
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);
    }
}

// Test the blockchain with transactions
const blockchain = new Blockchain();

blockchain.addBlock(new Block(1, new Date().toISOString(), "Transaction Data 1"));
blockchain.addBlock(new Block(2, new Date().toISOString(), "Transaction Data 2"));
blockchain.addBlock(new Block(3, new Date().toISOString(), "Transaction Data 3"));

// Output blocks
blockchain.chain.forEach(block => {
    console.log(block.toString());
});
-----------------------------------------------------------------------------------------------------------------------
3a) TRANSAKCIJE + FRONT (HTML + JS)
// HTML
<div id="output"></div>
// JS
class SimpleSmartContract {
    constructor() {
        this.storedData = 0;
    }
    set(x) {
        this.storedData = x;
    }
    get() {
        return this.storedData;
    }
}

const contract = new SimpleSmartContract();
document.getElementById("output").innerHTML += "Initial value: " + contract.get() + "<br>";
contract.set(42);
document.getElementById("output").innerHTML += "New value: " + contract.get();
